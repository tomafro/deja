deja() {
  run --separate-stderr -- $deja_bin "$@"
  export MOCK_COMMAND_STATUS=0
}

deja_setup() {
  load '../vendor/bats-support/load'
  load '../vendor/bats-assert/load'
  bats_require_minimum_version 1.5.0

  if [[ $BATS_SUITE_TEST_NUMBER -eq 0 ]]; then
    cargo build --release
  fi

  deja_bin="$PWD/target/release/deja"

  mkdir -p tmp/bats
  chmod -R 700 tmp/bats
  rm -rf tmp/bats/*
  export WORKSPACE=$PWD/tmp/bats/test
  mkdir -p "$WORKSPACE"
  export DEJA_CACHE=$PWD/tmp/bats/cache
  export PATH=$PWD/test/bin:$PATH
  export MOCK_COMMAND_STATUS=0
}

set_next_mock_command_return_status() {
  export MOCK_COMMAND_STATUS=$1
}

assert_mock_command_output() {
  assert_regex "$1" "[A-z0-9]+-[A-z0-9]+-[A-z0-9]+-[A-z0-9]+-[A-z0-9]+"
}

assert_success_with_mock_command_output() {
  assert_success
  assert_mock_command_output "$output"
}

assert_success_with_mock_command_output_matching() {
  assert_success
  assert_equal "$output" "$1"
  assert_mock_command_output "$1"
  assert_mock_command_output "$output"
}

assert_success_with_mock_command_output_not_matching() {
  assert_success
  assert_not_equal "$output" "$1"
  assert_mock_command_output "$1"
  assert_mock_command_output "$output"
}

assert_handled_failure() {
  assert_failure
  refute_regex "$stderr" "thread 'main' panicked"
}

folder_fixture() {
  mkdir -p "$WORKSPACE/$1"
  echo "$WORKSPACE/$1"
}
